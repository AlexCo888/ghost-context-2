// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity 0.8.4;

interface GhostContext {



error Access_MissingRoleOrAdmin( bytes32 role );
error Access_OnlyAdmin(  );
error Access_WithdrawNotAllowed(  );
error Admin_InvalidUpgradeAddress( address proposedAddress );
error Admin_UnableToFinalizeNotOpenEdition(  );
error ApprovalCallerNotOwnerNorApproved(  );
error ApprovalQueryForNonexistentToken(  );
error ApprovalToCurrentOwner(  );
error ApproveToCaller(  );
error BalanceQueryForZeroAddress(  );
error ExternalMetadataRenderer_CallFailed(  );
error MarketFilterDAOAddressNotSupportedForChain(  );
error MintFee_FundsSendFailure(  );
error MintToZeroAddress(  );
error MintZeroQuantity(  );
error Mint_SoldOut(  );
error ONLY_OWNER(  );
error ONLY_PENDING_OWNER(  );
error OperatorNotAllowed( address operator );
error OwnerQueryForNonexistentToken(  );
error Presale_Inactive(  );
error Presale_MerkleNotApproved(  );
error Presale_TooManyForAddress(  );
error Purchase_TooManyForAddress(  );
error Purchase_WrongPrice( uint256 correctPrice );
error RemoteOperatorFilterRegistryCallFailed(  );
error Sale_Inactive(  );
error Setup_RoyaltyPercentageTooHigh( uint16 maxRoyaltyBPS );
error TransferCallerNotOwnerNorApproved(  );
error TransferFromIncorrectOwner(  );
error TransferToNonERC721ReceiverImplementer(  );
error TransferToZeroAddress(  );
error URIQueryForNonexistentToken(  );
error Withdraw_FundsSendFailure(  );
event AdminChanged( address previousAdmin,address newAdmin ) ;
event Approval( address indexed owner,address indexed approved,uint256 indexed tokenId ) ;
event ApprovalForAll( address indexed owner,address indexed operator,bool approved ) ;
event BatchMetadataUpdate( uint256 _fromTokenId,uint256 _toTokenId ) ;
event BeaconUpgraded( address indexed beacon ) ;
event FundsReceived( address indexed source,uint256 amount ) ;
event FundsRecipientChanged( address indexed newAddress,address indexed changedBy ) ;
event FundsWithdrawn( address indexed withdrawnBy,address indexed withdrawnTo,uint256 amount,address feeRecipient,uint256 feeAmount ) ;
event MetadataUpdate( uint256 _tokenId ) ;
event MintComment( address indexed sender,address indexed tokenContract,uint256 indexed tokenId,uint256 quantity,string comment ) ;
event MintFeePayout( uint256 mintFeeAmount,address mintFeeRecipient,bool success ) ;
event OpenMintFinalized( address indexed sender,uint256 numberOfMints ) ;
event OwnerCanceled( address indexed previousOwner,address indexed potentialNewOwner ) ;
event OwnerPending( address indexed previousOwner,address indexed potentialNewOwner ) ;
event OwnershipTransferred( address indexed previousOwner,address indexed newOwner ) ;
event RoleAdminChanged( bytes32 indexed role,bytes32 indexed previousAdminRole,bytes32 indexed newAdminRole ) ;
event RoleGranted( bytes32 indexed role,address indexed account,address indexed sender ) ;
event RoleRevoked( bytes32 indexed role,address indexed account,address indexed sender ) ;
event Sale( address indexed to,uint256 indexed quantity,uint256 indexed pricePerToken,uint256 firstPurchasedTokenId ) ;
event SalesConfigChanged( address indexed changedBy ) ;
event Transfer( address indexed from,address indexed to,uint256 indexed tokenId ) ;
event UpdatedMetadataRenderer( address sender,address renderer ) ;
event Upgraded( address indexed implementation ) ;
function DEFAULT_ADMIN_ROLE(  ) external view returns (bytes32 ) ;
function MINTER_ROLE(  ) external view returns (bytes32 ) ;
function SALES_MANAGER_ROLE(  ) external view returns (bytes32 ) ;
function adminMint( address recipient,uint256 quantity ) external  returns (uint256 ) ;
function adminMintAirdrop( address[] memory recipients ) external  returns (uint256 ) ;
function approve( address to,uint256 tokenId ) external   ;
function balanceOf( address owner ) external view returns (uint256 ) ;
function burn( uint256 tokenId ) external   ;
function callMetadataRenderer( bytes memory data ) external  returns (bytes memory ) ;
function config(  ) external view returns (address metadataRenderer, uint64 editionSize, uint16 royaltyBPS, address fundsRecipient) ;
function contractURI(  ) external view returns (string memory ) ;
function contractVersion(  ) external view returns (uint32 ) ;
function factoryUpgradeGate(  ) external view returns (address ) ;
function finalizeOpenEdition(  ) external   ;
function getApproved( uint256 tokenId ) external view returns (address ) ;
function getRoleAdmin( bytes32 role ) external view returns (bytes32 ) ;
function grantRole( bytes32 role,address account ) external   ;
function hasRole( bytes32 role,address account ) external view returns (bool ) ;
function initialize( string memory _contractName,string memory _contractSymbol,address _initialOwner,address _fundsRecipient,uint64 _editionSize,uint16 _royaltyBPS,bytes[] memory _setupCalls,address _metadataRenderer,bytes memory _metadataRendererInit ) external   ;
function isAdmin( address user ) external view returns (bool ) ;
function isApprovedForAll( address nftOwner,address operator ) external view returns (bool ) ;
function manageMarketFilterDAOSubscription( bool enable ) external   ;
function marketFilterDAOAddress(  ) external view returns (address ) ;
function metadataRenderer(  ) external view returns (address ) ;
function mintedPerAddress( address minter ) external view returns (IERC721Drop.AddressMintDetails memory ) ;
function multicall( bytes[] memory data ) external  returns (bytes[] memory results) ;
function name(  ) external view returns (string memory ) ;
function owner(  ) external view returns (address ) ;
function ownerOf( uint256 tokenId ) external view returns (address ) ;
function presaleMintsByAddress( address  ) external view returns (uint256 ) ;
function proxiableUUID(  ) external view returns (bytes32 ) ;
function purchase( uint256 quantity ) external payable returns (uint256 ) ;
function purchasePresale( uint256 quantity,uint256 maxQuantity,uint256 pricePerToken,bytes32[] memory merkleProof ) external payable returns (uint256 ) ;
function purchasePresaleWithComment( uint256 quantity,uint256 maxQuantity,uint256 pricePerToken,bytes32[] memory merkleProof,string memory comment ) external payable returns (uint256 ) ;
function purchaseWithComment( uint256 quantity,string memory comment ) external payable returns (uint256 ) ;
function renounceRole( bytes32 role,address account ) external   ;
function revokeRole( bytes32 role,address account ) external   ;
function royaltyInfo( uint256 ,uint256 _salePrice ) external view returns (address receiver, uint256 royaltyAmount) ;
function safeTransferFrom( address from,address to,uint256 tokenId ) external   ;
function safeTransferFrom( address from,address to,uint256 tokenId,bytes memory _data ) external   ;
function saleDetails(  ) external view returns (IERC721Drop.SaleDetails memory ) ;
function salesConfig(  ) external view returns (uint104 publicSalePrice, uint32 maxSalePurchasePerAddress, uint64 publicSaleStart, uint64 publicSaleEnd, uint64 presaleStart, uint64 presaleEnd, bytes32 presaleMerkleRoot) ;
function setApprovalForAll( address operator,bool approved ) external   ;
function setFundsRecipient( address newRecipientAddress ) external   ;
function setMetadataRenderer( address newRenderer,bytes memory setupRenderer ) external   ;
function setOwner( address newOwner ) external   ;
function setSaleConfiguration( uint104 publicSalePrice,uint32 maxSalePurchasePerAddress,uint64 publicSaleStart,uint64 publicSaleEnd,uint64 presaleStart,uint64 presaleEnd,bytes32 presaleMerkleRoot ) external   ;
function supportsInterface( bytes4 interfaceId ) external view returns (bool ) ;
function symbol(  ) external view returns (string memory ) ;
function tokenURI( uint256 tokenId ) external view returns (string memory ) ;
function totalSupply(  ) external view returns (uint256 ) ;
function transferFrom( address from,address to,uint256 tokenId ) external   ;
function updateMarketFilterSettings( bytes memory args ) external  returns (bytes memory ) ;
function upgradeTo( address newImplementation ) external   ;
function upgradeToAndCall( address newImplementation,bytes memory data ) external payable  ;
function withdraw(  ) external   ;
function zoraERC721TransferHelper(  ) external view returns (address ) ;
function zoraFeeForAmount( uint256 quantity ) external view returns (address recipient, uint256 fee) ;
receive () external payable;
}

interface IERC721Drop {
struct AddressMintDetails {
uint256 totalMints;
uint256 presaleMints;
uint256 publicMints;
}

struct SaleDetails {
bool publicSaleActive;
bool presaleActive;
uint256 publicSalePrice;
uint64 publicSaleStart;
uint64 publicSaleEnd;
uint64 presaleStart;
uint64 presaleEnd;
bytes32 presaleMerkleRoot;
uint256 maxSalePurchasePerAddress;
uint256 totalMinted;
uint256 maxSupply;
}
}